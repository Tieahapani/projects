# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxLVCWIZgPga5zspSZAKL2wmj-JitfkQ
"""

import pandas as pd
from sklearn.datasets import load_digits
digits = load_digits()

df = pd.DataFrame(digits.data)
df

digits.target



df['target'] = digits.target
df

X = df.drop(['target'], axis = 'columns')
y = df.target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y , test_size = 0.2, random_state = 5)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(X_train, y_train)

knn.score(X_test, y_test)

knn.predict(X_test)

from sklearn.metrics import confusion_matrix
y_pred = knn.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
cm

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sn
plt.figure(figsize=(10,7))
sn.heatmap(cm, annot = True)
plt.xlabel('predicted')
plt.ylabel('Truth')

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

import pandas as pd
from sklearn.datasets import load_digits

datasets = load_digits()

datasets

datasets.data[0]

datasets.data[0].reshape(8,8)

# Commented out IPython magic to ensure Python compatibility.

from matplotlib import pyplot as plt
# %matplotlib inline
plt.gray()
plt.matshow(datasets.data[50].reshape(8,8))

import numpy as np
np.unique(datasets.target)

datasets.target[9]

df = pd.DataFrame(datasets.data, columns = datasets.feature_names)
df

df.describe()

X = df
y = datasets.target

y

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled,y, test_size = 0.2, random_state = 30)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)
model.score(X_test, y_test)

from sklearn.decomposition import PCA
pca = PCA(0.95)
X_pca = pca.fit_transform(X)
X_pca.shape

X_train_pca, X_test_pca, y_train, y_test = train_test_split(X_pca, y, test_size = 0.2, random_state = 42)

model = LogisticRegression(max_iter = 2000)
model.fit(X_train_pca, y_train)
model.score(X_test_pca, y_test)

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv('heart.csv')
df

df.isnull().sum()

target = df.drop(['HeartDisease'], axis = 'columns')
target

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Sex'] = le.fit_transform(df['Sex'])
df['ChestPainType'] = le.fit_transform(df['ChestPainType'])
df['RestingECG'] = le.fit_transform(df['RestingECG'])
df['ST_Slope'] = le.fit_transform(df['ST_Slope'])
df['ExerciseAngina'] = le.fit_transform(df['ExerciseAngina'])

df

X = df
y = target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 42)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(X, y_train)
model.score(X_test, y_test)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv('heart.csv') # Assuming 'heart.csv' is loaded

# Preprocessing
le = LabelEncoder()
df['Sex'] = le.fit_transform(df['Sex'])
df['ChestPainType'] = le.fit_transform(df['ChestPainType'])
df['RestingECG'] = le.fit_transform(df['RestingECG'])
df['ST_Slope'] = le.fit_transform(df['ST_Slope'])
df['ExerciseAngina'] = le.fit_transform(df['ExerciseAngina'])

# Assign features (X) and target (y)
X = df.drop('HeartDisease', axis=1)  # All columns except 'HeartDisease'
y = df['HeartDisease']  # 'HeartDisease' column

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training and evaluation
model = DecisionTreeClassifier()
model.fit(X_train, y_train)
model.score(X_test, y_test)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(max_iter = 2000)
model.fit(X_train, y_train)
model.score(X_test, y_test)

df.shape

from sklearn.decomposition import PCA
pca = PCA(0.20)
X_pca = pca.fit_transform(X)
X_pca.shape

X_train_pca, X_test_pca, y_train, y_test = train_test_split(X_pca, y, test_size = 0.2, random_state = 42)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(X_train_pca, y_train)
model.score(X_test_pca, y_test)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X_train, y_train)
model.score(X_test, y_test)

model_rf = RandomForestClassifier()
model_rf.fit(X_train_pca, y_train)
model_rf.score(X_test_pca, y_test)

